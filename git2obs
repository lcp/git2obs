#!/bin/sh

CONFIG_FILE=$HOME/.git2obsrc
LOG_FILE=/tmp/git2obs.$$

[ -z "$G2O_USER" ] && G2O_USER=`git config user.user`
[ -z "$G2O_EMAIL" ] && G2O_EMAIL=`git config user.email`
if [ -z "$G2O_COMMIT_AUTHOR" ]; then
    G2O_COMMIT_AUTHOR="$G2O_USER <$G2O_EMAIL>"
fi

if   [[ "$G2O_EMAIL" =~ intel.com ]]; then
	[ -z "$OSC_OPTS" ] && OSC_OPTS=""
	[ -z "$OSC_REPO" ] && OSC_REPO="UX"
elif [[ "$G2O_EMAIL" =~ novell.com ]]; then
	[ -z "$OSC_OPTS" ] && OSC_OPTS=""
	[ -z "$OSC_REPO" ] && OSC_REPO="Moblin:UI:Snapshot"
	[ -z "$AUTO_SUBMIT"] && AUTO_SUBMIT=true
else
	[ -z "$OSC_OPTS" ] && OSC_OPTS=""
	[ -z "$OSC_REPO" ] && OSC_REPO=""
fi

usage ()
{
	echo "Usage: git2obs directory version_prefix"
	exit 1
}

###
# we want pretty messages!
# FIXME: use $COLUMMS here ?

# COLS & COL
if [ "$COLS" ] && [ "$COLS" -gt 6 ]; then
	COL=`expr $COLS - 7`
else
	COLS=80
	COL=73
fi


if [ "$COLS" ] && [ "$COLS" -gt 6 ]; then
	COL=`expr $COLS - 7`
else
	COLS=80
	COL=73
fi

log_message ()
{
	echo -n " * $1"
}

log_message_end ()
{
	if [ -z "$1" ]; then
		return 1
	fi

	printf "\r"
	tput hpa $COL
	if [ "$1" -eq 0 ]; then
		printf '[ '
		tput setaf 2 # green
		printf OK
		tput op # normal
		echo ' ]'
	else
		printf '['
		tput setaf 1 # red
		printf fail
		tput op # normal
		echo ']'
	fi

	return $1
}

run ()
{
	local command=$1

	echo "\$ $command" >> $LOG_FILE
	$command >> $LOG_FILE 2>&1
}

###
# okko message command
okko ()
{
	local message=$1
	local command=$2
	local result

	log_message "$message"
	run "$command"
        result=$?
	log_message_end $result
	if [ $result != 0 ]; then
		echo "Ooops... an error occured, see $LOG_FILE"
		exit 1
	fi
}

[ -f "$CONFIG_FILE" ] && source $CONFIG_FILE

# options
[ -z "$1" ] && usage
PKG_NAME=`basename "$1"`
PKG_PATH=`echo "$1" | sed -e 's,/$,,'`
if [ -z "$2" ]; then
	config=
	[ -f "$1/configure.ac" ] && config=$1/configure.ac
	[ -f "$1/configure.in" ] && config=$1/configure.in
	VP=
	if [ -f $config ]; then
	    VP=`grep 'AC_INIT' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//'`
	fi
	if [ -z "$VP" -a -f $config ]; then # try harder ...
	    MAJ=`grep 'm4_define(.*_major' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//' | head -n1`
	    MIN=`grep 'm4_define(.*_minor' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//' | head -n1`
	    MIC=`grep 'm4_define(.*_micro' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//' | head -n1`
	    if [ -z "$MAJ" -o -z "$MIN" -o -z "$MIC" ]; then
		echo "Failed to detect maj/min/micro"
	    else
		VP="$MAJ.$MIN.$MIC"
		echo "Detected version: $VP"
	    fi
	fi
	if [ -z "$VP" -a -f $config ]; then # try harder ...
	    VP=`grep 'AM_INIT_AUTOMAKE' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//'`
	fi
	if [ -z "$VP" -a -f $config ]; then # try harder ...
	    VP=`grep 'm4_define(\[mwb_version\]' $config | sed 's/[^,]*,[ \[]*//' | sed 's/\]*[,)].*//' | sed 's/[^0-9\.]*//'`
	fi
	if [ -z "$VP" ]; then
	    echo "Can't detect version from configure.ac"
	    usage
	fi

else
	VP=$2
fi
run "pushd $1"
DATE=`git show --pretty=format:%ci | head -n 1 | sed -e 's/-//g' | awk '{print $1;}'`
run popd

VNUMBER=${VP}_${DATE}
PKG_TARBALL=$PKG_NAME-$VNUMBER.tar.bz2
PKG_FULLNAME=$PKG_NAME-$VNUMBER

# [ -d "/tmp/$OSC_REPO" ] || mkdir /tmp/$OSC_REPO;

check_base ()
{
	local op=$1
	local file=$2
	local message=$3

	[ $op "$file" ] || {
		echo "$message"
		exit 1
	}
}

check_file ()
{
	check_base '-f' "$1" "could not find $1."
}

check_directory ()
{
	check_base '-d' "$1" "$1 is not a directory."
}

check_exist ()
{
	check_base '! -e' "$1" "$1 in the way, please remove it."
}

# input validation
check_directory "$PKG_PATH"
check_base '-d' "$PKG_PATH/.git" "$PKG_PATH is not a git repository."

# be sure nothing is in the way
check_exist "/tmp/$PKG_FULLNAME"
check_exist "/tmp/$OSC_REPO/$PKG_NAME"
check_exist "/tmp/$PKG_TARBALL"

# checkout a fresh repo from OBS
run "pushd /tmp"
okko "Checking-out OBS package $PKG_NAME" "osc $OSC_OPTS co $OSC_REPO $PKG_NAME"
run popd

run "pushd /tmp/$OSC_REPO/$PKG_NAME"
PKG_OLD_TARBALL=`ls $PKG_NAME*.tar.bz2`
OLD_HASH=`grep 'Update to commit' $PKG_NAME.changes | head -n 1 | sed 's/.*to commit //'`
run popd

# compare hash
compare_hash()
{
	COMMIT_HASH=`git show-ref -s -h | head -n 1`
	if [ "$OLD_HASH" == "$COMMIT_HASH" ]; then
		# The old tarball is the same as the new one. Let it alone.
		run "rm $LOG_FILE"
		run "rm -rf /tmp/$OSC_REPO/$PKG_NAME"
		echo "Already up to date"
		exit
	fi
}

# make a tarball
create_tarball ()
{
	git archive --prefix=$PKG_FULLNAME/ --format=tar $COMMIT_HASH \
		| bzip2 -f > $PKG_TARBALL
	mv $PKG_TARBALL /tmp/$OSC_REPO/$PKG_NAME
}
run "pushd $PKG_PATH"
compare_hash
okko "Creating new package $PKG_TARBALL" create_tarball

# update OBS metadata
update_metadata ()
{
	osc vc -m "Update to commit $COMMIT_HASH"
	# update the version in the ini file
	if [ -f "$PKG_NAME.ini" ]; then
	    sed -i -e "s,Version.*,Version = $VNUMBER," $PKG_NAME.ini
	else
	    sed -i -e "s,\(Version: *\)[^)]*,\1$VNUMBER," $PKG_NAME.spec
	fi
}
run "pushd /tmp/$OSC_REPO/$PKG_NAME"
okko "Updating .ini file for $PKG_FULLNAME" update_metadata

# add update info in .changes file
# run spec-builder to update the spec file
update_spec ()
{
	spec-builder $PKG_NAME.ini > $PKG_NAME.spec
}
if [ -f "$PKG_NAME.ini" ]; then
    okko "Updating .spec file for $PKG_FULLNAME" update_spec
fi

prepare_commit ()
{
	[ "$PKG_OLD_TARBALL" != "$PKG_TARBALL" ] && rm $PKG_OLD_TARBALL
	osc $OSC_OPTS addremove
}
okko "Preparing for commit" prepare_commit

# exit now to let the use update the .changes file before submitting
# the package.
[ -z "$AUTO_SUBMIT" ] && exit 0

commit ()
{
	osc $OSC_OPTS commit -m "Update to $COMMIT_HASH"
}
okko "Sending new version" commit
run popd

# everything's all right, we can remove the log file and the OBS checkout
run "rm $LOG_FILE"
run "rm -rf /tmp/$OSC_REPO/$PKG_NAME"
