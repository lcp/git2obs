#!/bin/sh

CONFIG_FILE=$HOME/.git2obsrc
LOG_FILE=/tmp/git2obs.$$

usage ()
{
	echo "Usage: git2obs directory version_prefix"
	exit 1
}

###
# we want pretty messages!
# FIXME: use $COLUMMS here ?

# COLS & COL
if [ "$COLS" ] && [ "$COLS" -gt 6 ]; then
	COL=`expr $COLS - 7`
else
	COLS=80
	COL=73
fi


if [ "$COLS" ] && [ "$COLS" -gt 6 ]; then
	COL=`expr $COLS - 7`
else
	COLS=80
	COL=73
fi

log_message ()
{
	echo -n " * $1"
}

log_message_end ()
{
	if [ -z "$1" ]; then
		return 1
	fi

	printf "\r"
	tput hpa $COL
	if [ "$1" -eq 0 ]; then
		printf '[ '
		tput setaf 2 # green
		printf OK
		tput op # normal
		echo ' ]'
	else
		printf '['
		tput setaf 1 # red
		printf fail
		tput op # normal
		echo ']'
	fi

	return $1
}

run ()
{
	local command=$1

	echo "\$ $command" >> $LOG_FILE
	$command >> $LOG_FILE 2>&1
}

###
# okko message command
okko ()
{
	local message=$1
	local command=$2
	local result

	log_message "$message"
	run "$command"
        result=$?
	log_message_end $result
	if [ $result != 0 ]; then
		echo "Ooops... an error occured, see $LOG_FILE"
		exit 1
	fi
}

[ -f "$CONFIG_FILE" ] && source $CONFIG_FILE

# options
[ -z "$1" -o -z "$2" ] && usage
PKG_NAME=`basename "$1"`
PKG_PATH=`echo "$1" | sed -e 's,/$,,'`
VP=$2
DATE=`date +%Y%m%d`
COMMIT_DATE=`date +'%a %b %d %Y'`
PKG_TARBALL=$PKG_NAME-$VP$DATE.tar.bz2

# default values
[ -z "$G2O_SANDBOX_CHECKOUT" ] && G2O_SANDBOX_CHECKOUT=$HOME/moblin/UX
[ -z "$G2O_COMMIT_AUTHOR" ] && {
	G2O_COMMIT_AUTHOR="Damien Lespiau <damien.lespiau@intel.com>"
}

check_base ()
{
	local op=$1
	local file=$2
	local message=$3

	[ $op "$file" ] || {
		echo "$message"
		exit 1
	}
}

check_file ()
{
	check_base '-f' "$1" "could not find $1."
}

check_directory ()
{
	check_base '-d' "$1" "$1 is not a directory."
}

check_exist ()
{
	check_base '! -e' "$1" "$1 in the way, please remove it."
}

# input validation
check_directory "$PKG_PATH"

# be sure nothing is in the way
check_exist "/tmp/$PKG_NAME-$VP$DATE"
check_exist "/tmp/UX/$PKG_NAME"
check_exist "/tmp/$PKG_NAME-$VP$DATE.tar.bz2"

# checkout a fresh repo from OBS
run "pushd /tmp"
okko "Checking-out OBS package $PKG_NAME" "osc co UX $PKG_NAME"
run popd

run "pushd /tmp/UX/$PKG_NAME"
PKG_OLD_TARBALL=`ls *.tar.bz2`
run popd

# make a tarball
create_tarball ()
{
	COMMIT_HASH=`git show-ref -s HEAD | head -n 1`
	git archive --prefix=$PKG_NAME-$VP$DATE/ --format=tar $COMMIT_HASH \
		| bzip2 -f > $PKG_TARBALL
	mv $PKG_TARBALL /tmp/UX/$PKG_NAME
}
run "pushd $PKG_PATH"
okko "Creating new package $PKG_TARBALL" create_tarball

# update OBS metadata
update_metadata ()
{
	mv $PKG_NAME.changes $PKG_NAME.changes.orig
	echo "* $COMMIT_DATE $G2O_COMMIT_AUTHOR $VP$DATE" > $PKG_NAME.changes
	echo "- Update to commit $COMMIT_HASH" >> $PKG_NAME.changes
	echo "" >> $PKG_NAME.changes
	cat $PKG_NAME.changes.orig >> $PKG_NAME.changes
	rm $PKG_NAME.changes.orig
	# update the version in the ini file
	sed -i -e "s,Version.*,Version = $VP$DATE," $PKG_NAME.ini
}
run "pushd /tmp/UX/$PKG_NAME"
okko "Updating .ini file for $PKG_NAME-$VP$DATE" update_metadata

# add update info in .changes file
# run spec-builder to update the spec file
update_spec ()
{
	spec-builder $PKG_NAME.ini > $PKG_NAME.spec
}
okko "Updating .spec file for $PKG_NAME-$VP$DATE" update_spec

prepare_commit ()
{
	rm $PKG_OLD_TARBALL
	osc addremove
}
okko "Preparing for commit" prepare_commit

commit ()
{
	osc commit -m "Update to HEAD"
}
okko "Sending new version" commit
run popd

# everything's all right, we can remove the log file and the OBS checkout
run "rm $LOG_FILE"
run "rm -rf /tmp/UX/$PKG_NAME"
